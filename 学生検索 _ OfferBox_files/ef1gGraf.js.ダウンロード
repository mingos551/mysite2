(function($){

    var methods = {

        BarChart: function(data, color, width, height) {
            var chart_data = _.values(data);

            var i = 97;
            var chart_keys = _.map(_.keys(data), function(name) {
                name = String.fromCharCode(i++) + ',' + name;

                // 11文字を超える場合に改行処理をする
                if (name.length > 11) {
                    var total_char = [];
                    var row_char   = '';

                    var key_name = _.map(name, function(char, index) {
                        // 10文字ごとに配列に追加
                        if (index !== 0 && index % 10 === 0) {
                            total_char.push(row_char);
                            row_char = '';
                        }

                        // 1行に文字を連結
                        row_char += char;

                        // 最後の文字までいったら、残りを配列に追加してreturn
                        if (index >= name.length-1) {
                            total_char.push(row_char);
                            return total_char;
                        }
                    });

                    return _.last(key_name);
                } else {
                    return name;
                }
            });

            var columns = [];
            var colors = {};
            if (_.isArray(color)) {
                _.each(color, function(val, key) {
                    var data_key = 'data' + (key + 1);
                    columns.push([data_key, chart_data[key]]);
                    colors[data_key] = val;
                });

                var chart_keys_temp = [chart_keys];
                chart_keys = chart_keys_temp;
            } else {
                chart_data.unshift('data1');
                columns.push(chart_data);
                colors['data1'] = color;
            }

            var chart = c3.generate({
                bindto: this.selector,
                size: {width: width, height: height},
                tooltip: {show: false},
                data: {
                    columns: columns,
                    type: 'bar',
                    labels: {
                        format: {
                            data1: function (v) {return Math.round(v);},
                            data2: function (v) {return Math.round(v);},
                            data3: function (v) {return Math.round(v);},
                        }
                    },
                    colors: colors
                },
                bar: {width: 15},
                grid: {
                    y: {show: true}
                },
                axis: {
                    x: {
                        type: 'category',
                        categories: chart_keys,
                        tick: {centered: true, width: 75},
                    },
                    y: {
                        default: [0, 100],
                        max: 80,
                        min: 20,
                        tick: {rotate: 60},
                    },
                    rotated: true
                },
                legend: {hide: true}
            });
        },

        VerticalBarChart: function(data, color) {
            var chart_data = _.values(data);
            chart_data.unshift('data1');

            var chart = c3.generate({
                bindto: this.selector,
                size: {width: 60, height: 180},
                tooltip: {show: false},
                padding: {left: 30},
                data: {
                    columns: [chart_data],
                    type: 'bar',
                    colors: {'data1': color}
                },
                bar: {width: 15},
                axis: {
                    x: {type: 'category', categories: _.keys(data)},
                    y: {max: 50, min: 10}
                },
                grid: {
                    y: {show: true}
                },
                legend: {hide: true}
            });
        },


        RadarChart: function(data, page, options) {
            var make_data = makeRadarChartData(data, page);

            options['tooltipFormatValue'] = function(d) {
                return Math.round(d);
            };

            RadarChart.draw(this.selector, [make_data], options);
        },

        DonutsChart: function(data, colors) {
            var chart_data = _.map(_.keys(colors), function(key, num) {
                return [key, _.values(data)[num]];
            });

            var chart = c3.generate({
                bindto: this.selector,
                size: {width: 140, height: 140},
                tooltip: {show: false},
                data: {
                    columns: chart_data,
                    colors: colors,
                    order: null,
                    type: 'donut',
                },
                donut: {
                    width: 20,
                    label: {
                        show: true,
                        color: '#000',
                        threshold: 0.01,
                        format: function (value, ratio, id) {
                            return id;
                        }
                    },
                },
                legend: {show: false}
            });
        },

        LineChart: function(data, color) {
            var chart_data = _.values(data);
            chart_data.unshift('data1');

            var i = 97;
            var keys = _.map(_.keys(data), function(key) {
                // return String.fromCharCode(i++) + ',' + key;
                return key;
            });

            var chart = c3.generate({
                bindto: this.selector,
                size: {width: 320, height: 180},
                tooltip: {show: false},
                data: {
                    columns: [chart_data],
                    type: 'area',
                    labels: {
                        format: {data1: function (v, id, i, j) {return Math.round(v);}}
                    },
                    colors: {'data1': color}
                },
                bar: {width: 10},
                axis: {
                    x: {type: 'category', categories: keys},
                    y: {max: 90, min: 20}
                },
                legend: {hide: true}
            });
        },
    };

    $.fn.ef1gGraf = function(method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else {
            $.error('Method ' +  method + ' does not exist on jQuery.ef1gGraf');
        }
    };
})(jQuery);

function makeRadarChartData(data, page) {
    var i = 97;
    return _.map(data, function(val, key) {
        var radar_data = {
            axis    : String.fromCharCode(i++) + ',' + key,
            value   : val,
            xOffset : rader_positions(page)[key]['x'],
            yOffset : rader_positions(page)[key]['y']
        };

        return radar_data;
    });
}

var rader_positions = function(page) {
    switch (page) {
    case 'main':
    case 'search':
    case 'studentprof':
        return {
            // II-1 能力特性1
            '集中力' : {'x':0, 'y':10},  '論理力'      : {'x':-15, 'y':-5},
            '計画力' : {'x':0, 'y':10},  '対策立案力'   : {'x':4, 'y':-17},
            '学習力' : {'x':4, 'y':-5},  '本質探索力'   : {'x':25, 'y':-5},
            '理解力' : {'x':-4, 'y':-5}, '行動・実行力' : {'x':-4, 'y':-17},
            '判断力' : {'x':15, 'y':-5}, '処理・対応力' : {'x':-25, 'y':-5},

            // III-1 基本特性
            '主体性': {'x':0, 'y':10},   '誠実性': {'x':0, 'y':10},
            '向上心': {'x':0, 'y':5},    '平等性': {'x':0, 'y':5},
            '責任感': {'x':0, 'y':5},    '献身性': {'x':0, 'y':5},
            '積極性': {'x':0, 'y':0},    '緻密性': {'x':0, 'y':0},
            '外向性': {'x':0, 'y':0},    '規律性': {'x':0, 'y':0},
            '明朗性': {'x':0, 'y':-5},   '寛容性': {'x':0, 'y':-5},
            '機敏性': {'x':0, 'y':-5},   '配慮性': {'x':0, 'y':-5},
            '柔軟性': {'x':0, 'y':-10},  '協調性': {'x':0, 'y':-10}
        };

    case 'basic':
        return {
            '営業職' : {'x':0, 'y':15},  '研究職' : {'x':0, 'y':0},
            '企画職' : {'x':0, 'y':0},   '技術職' : {'x':0, 'y':0},
            '事務職' : {'x':0, 'y':-15}, 'サービス職' : {'x':0, 'y':0},
        };

    case 'mikiwame':
        return {
            '人間関係へのストレス耐性' : {'x':0, 'y':10},
            '責任が重くなることに対するストレス耐性' : {'x':100, 'y':-5},
            '規律や管理に対するストレス耐性'      : {'x':50, 'y':-5},
            '曖昧で不確実なことへのストレス耐性' : {'x':-60, 'y':-5},
            '仕事の負荷へのストレス耐性' : {'x':-80, 'y':-5},
        };
    }
};
