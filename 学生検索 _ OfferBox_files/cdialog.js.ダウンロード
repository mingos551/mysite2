/** 音信不通メッセージのリマインドダイアログ */

'use strict';

$(function() {
    /** @var {object} 音信不通メッセージのリマインドダイアログ */
    const MESSAGE_REPLY_REMIND_DIALOG = $('#message_reply_remind_dialog');
    /** @var {object} 今後この通知を表示しないチェック */
    const DIALOG_CHECKBOX = MESSAGE_REPLY_REMIND_DIALOG.find('input[name="is_notice"]');
    /** @var {object} メッセージリストを確認ボタン */
    const MESSAGE_LIST_BUTTON = MESSAGE_REPLY_REMIND_DIALOG.find('.link-button');
    /** @var {object} 閉じるボタン */
    const CLOSE_BUTTON = MESSAGE_REPLY_REMIND_DIALOG.find('.close-button');

    /** @var {string} アクション トップページ表示 */
    const ACTION_DISPLAY_TOP = 'display_top';
    /** @var {string} アクション リマインドダイアログのメッセージリスト確認ボタンを押下 */
    const ACTION_REMIND_CHECK = 'remind_check';
    /** @var {string} アクション リマインドダイアログの閉じるボタンを押下 */
    const ACTION_REMIND_CLOSE = 'remind_close';

    /** @var {number} 数値true */
    const TRUE_NUMBER = 1;
    /** @var {number} 数値false */
    const FALSE_NUMBER = 0;
    /** @var {number} フェードのアニメーション時間(ms) */
    const FADE_TIME = 400;
    /** @var {number} リマインドダイアログの表示/非表示を切り替える高さ(px) */
    const DISPLAY_SWITCH_HEIGHT = 200;
    /** @var {number} 二重クリックの防止時間(ms) */
    const PREVENT_CLICK_TIME = 1000;
    /** @var {number} 通信のタイムアウト時間(ms) */
    const FORCED_TERMINATION_TIME = 60000;

    /**
     * 画面が読み込まれた時の制御
     */
    $.ajax({
        type: 'GET',
        url: '/api/company/messageremind',
        cache: false,
        timeout: FORCED_TERMINATION_TIME,
        dataType: 'json',
    })
    .done(function(response) {
        if (response.is_remind) {
            if ($(window).scrollTop() > DISPLAY_SWITCH_HEIGHT) {
                MESSAGE_REPLY_REMIND_DIALOG.removeClass('hide').hide();
            } else {
                MESSAGE_REPLY_REMIND_DIALOG.fadeIn(FADE_TIME).removeClass('hide');
            }
            controlMessageReplyRemindDialog();
        } else {
            MESSAGE_REPLY_REMIND_DIALOG.remove();
        }
    })
    .fail(function() {
        MESSAGE_REPLY_REMIND_DIALOG.remove();
    })
    .always(function(response) {
        // トップページを表示したログ送信
        var displayDialogLog = getDisplayDialogLog(response.is_remind);
        postLogData(displayDialogLog);
    });

    /**
     * リマインドダイアログの制御
     */
    function controlMessageReplyRemindDialog() {
        /**
         * 画面の動きに対する制御
         */
        $(window).on('scroll', function() {
            if ($(this).scrollTop() > DISPLAY_SWITCH_HEIGHT) {
                MESSAGE_REPLY_REMIND_DIALOG.fadeOut(FADE_TIME);
            } else {
                MESSAGE_REPLY_REMIND_DIALOG.fadeIn(FADE_TIME);
            }
        });
        /**
         * メッセージリストを確認ボタンを押した時の制御
         */
        MESSAGE_LIST_BUTTON.on('click', function() {
            preventClick($(this));
            if (DIALOG_CHECKBOX.prop('checked')) {
                postMessageReplyRemindSetting();
                MESSAGE_REPLY_REMIND_DIALOG.fadeOut(FADE_TIME, function() {
                    $(this).remove();
                });
            }
            // 確認ボタンを押したログを送信
            var clickDialogButtonLog = getClickDialogButtonLog(ACTION_REMIND_CHECK);
            postLogData(clickDialogButtonLog);
        });
        /**
         * 閉じるボタンを押した時の制御
         */
        CLOSE_BUTTON.on('click', function() {
            preventClick($(this));
            MESSAGE_REPLY_REMIND_DIALOG.fadeOut(FADE_TIME, function() {
                $(this).remove();
            });
            postMessageReplyRemindSetting();
            // 閉じるボタンを押したログ送信
            var clickDialogButtonLog = getClickDialogButtonLog(ACTION_REMIND_CLOSE);
            postLogData(clickDialogButtonLog);
        });
    }

    /**
     * リマインドダイアログ表示設定の送信
     */
    function postMessageReplyRemindSetting() {
        $.ajax({
            type: 'POST',
            url: '/api/company/messageremind',
            cache: false,
            timeout: FORCED_TERMINATION_TIME,
            dataType: 'json',
            data: {
                // NOTE: ajaxではboolean型は文字列でpostされてしまうため、int(number)に変換
                // is_notice => リマインドダイアログを表示するかどうか true: 今後も表示する, false: 今後表示しない */
                is_notice: !DIALOG_CHECKBOX.prop('checked') ? TRUE_NUMBER : FALSE_NUMBER,
            },
        })
        .done(function() {
            return;
        })
        .fail(function() {
            return;
        });
    }

    /**
     * ログデータの送信
     * @param {object} logData
     */
    function postLogData(logData) {
        $.ajax({
            type: 'POST',
            url: '/api/company/messageremind/analyze',
            cache: false,
            timeout: FORCED_TERMINATION_TIME,
            dataType: 'json',
            data: logData,
        })
        .done(function() {
            return;
        })
        .fail(function() {
            return;
        });
    }

    /**
     * リマインドダイアログが表示された時のログデータを取得
     * NOTE: ajaxではboolean型は文字列でpostされてしまうため、int(number)に変換
     * @param {boolean} isRemind
     * @return {object}
     */
    function getDisplayDialogLog(isRemind) {
        return {
            action: ACTION_DISPLAY_TOP,
            message_url: '',
            remind_hide_checked: DIALOG_CHECKBOX.prop('checked') ? TRUE_NUMBER : FALSE_NUMBER,
            is_remind: isRemind ? TRUE_NUMBER : FALSE_NUMBER,
            user_agent: navigator.userAgent,
            current_url: location.href,
            previous_url: document.referrer,
        };
    }

    /**
     * リマインドダイアログのボタンが押された時のログデータ取得
     * NOTE: ajaxではboolean型は文字列でpostされてしまうため、int(number)に変換
     * @param {string} action
     * @return {object}
     */
    function getClickDialogButtonLog(action) {
        return {
            action: action,
            message_url: '',
            remind_hide_checked: DIALOG_CHECKBOX.prop('checked') ? TRUE_NUMBER : FALSE_NUMBER,
            is_remind: TRUE_NUMBER,
            user_agent: navigator.userAgent,
            current_url: location.href,
            previous_url: document.referrer,
        };
    }

    /**
     * クリック防止
     * @param {object} target
     */
    function preventClick(target) {
        target.css('pointer-events', 'none');
        setTimeout(function() {
            target.css('pointer-events', 'auto');
        }, PREVENT_CLICK_TIME);
    }
});
