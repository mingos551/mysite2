var selectedPersonalitymapStyleTmp = [];

$(function() {
    var personalityMapStyle = ['A', 'D', 'E', 'C', 'B'];

    initSettingDisplay();
    getPersonalityMapConfig();

    $('.distribution').on({
        'mouseenter': function(){
            $(this).children('.distribution_detail').show();
        },
        'mouseleave': function(){
            $(this).children('.distribution_detail').hide();
        }
    }, '.distribution_cell');

    $('#competence_search_personalitymap .personality_map_open').click(function() {
        init();
    })

    $('#personality_map_modal .ofb-btn.ofb-btn--submit').click(function() {
        setSelectedStyle();
    })

    $('#personality_map_modal .ofb-btn.reset').click(function() {
        resetSearchPersonalitymap();
    })

    /**
     * ラベル絞り込みモーダル
     */
    $('#open_label_filter_modal_01').click(function() {
        $('#label_filter_modal_01').show();
    })
    $('#label_filter_modal_01 .close, #label_filter_modal_01 .modal-backdrop').click(function() {
        $('#label_filter_modal_01').hide();
    })
    $('#label_filter_modal_01 .modal_submit_btn').click(function() {
        $('#label_filter_modal_01').hide();
        updateLabelCount();
        getPersonalityMap(true);
        displaySelectedLabel();
    })

    $('#personality_map_modal .map_conditions input[type="checkbox"]').change(function() {
        var changeEl = $(this);
        if (changeEl.attr('name') === 'target_all') {
            if (changeEl.prop('checked')) {
                $('#personality_map_modal .map_conditions input[type="checkbox"]').prop('checked', true);
            } else {
                $('#personality_map_modal .map_conditions input[type="checkbox"]').prop('checked', false);
            }
        } else {
            var itemLength = $('#personality_map_modal .map_conditions input[type="checkbox"]:not(input[name="target_all"])').length;
            var checkedLength = $('#personality_map_modal .map_conditions input[type="checkbox"]:not(input[name="target_all"]):checked').length;
            if (itemLength === checkedLength) {
                $('#personality_map_modal .map_conditions input[type="checkbox"]:input[name="target_all"]').prop('checked', true);
            } else {
                $('#personality_map_modal .map_conditions input[type="checkbox"]:input[name="target_all"]').prop('checked', false);
            }
        }

        getPersonalityMap(true);
        updateLabelCount();
    })

    $('#personality_map_modal .map_conditions .filter').change(function() {
        getPersonalityMap(true);
        updateLabelCount();
    })

    function initSettingDisplay() {
        var personalityMapVal = getParam('personality_map_val');
        if (personalityMapVal) {
            var selectedStyleEl = '';
            personalityMapVal.split(',').forEach(function(val, index) {
                var type = val.slice(0, 3);
                var style = val.slice(-1);
                selectedStyleEl += '<input type="hidden" name="personality_map_val[' + index + ']" value="' + type +',' + style + '"></input>';
            });
            $('#selected_personalitymap_style').html(selectedStyleEl);
        }

        if ($('#selected_personalitymap_style input').length > 0) {
            var selectedStyleString = '';
            $('#selected_personalitymap_style input').each(function(index, el) {
                var value = $(el).val();
                var array = value.split(',');
                var type = array[0];
                var typeNum = type.replace(/CL/g , '') ;
                var style = array[1];
                selectedStyleString += 'Type' + typeNum + style + ' ';
            })
            $('#cpersonalitymap_search_checked_item').text(selectedStyleString);
            $('#cpersonalitymap_search_checked').show();
        }
    }

    function init() {
        updateLabelCount();
        getPersonalityMap(false);
    }

    function setSelectedStyle() {
        var selectedStyle = $('#personality_map_modal .distribution_cell.selected');
        var selectedStyleEl = '';
        var selectedStyleString = '';
        var isSet = false;
        selectedStyle.each(function(index, el){
            var type = $(el).data('type');
            var style = $(el).data('style');
            isSet = true;
            selectedStyleEl += '<input type="hidden" name="personality_map_val[' + index + ']" value="' + type +',' + style + '"></input>';
            var typeNum = type.replace(/CL/g , '') ;
            selectedStyleString += 'Type' + typeNum + style + ' ';
        });
        if (isSet) {
            $('#cpersonalitymap_search_checked').show();
        } else {
            $('#cpersonalitymap_search_checked').hide();
        }
        $('#selected_personalitymap_style').html(selectedStyleEl);
        $('#cpersonalitymap_search_checked_item').text(selectedStyleString);
        set_search_count(make_search_params());
    }

    function getPersonalityMap(isUpdate) {
        var target = {};
        $('#personality_map_modal .map_conditions input[type="checkbox"]:not(input[name="target_all"])').each(function(index, el) {
            target[$(this).val()] = Number($(this).prop('checked'));
        })
        var labels = getCheckedLabelList();
        var data = {
            'target': target,
            'year': $('#personality_map_modal .map_conditions select[name="year"] option:selected').val(),
            'phase': $('#personality_map_modal .map_conditions select[name="phase"] option:selected').val(),
            'label': labels
        };

        var selectedStyleArray = [];
        if (isUpdate) {
            setSelectedStyleTmp();
            selectedStyleArray = selectedPersonalitymapStyleTmp;
        } else {
            $('#selected_personalitymap_style input').each(function(index, el) {
                selectedStyleArray.push($(el).val());
            })
        }

        loadingStart('#personality_map_modal .distribution');

        $.ajax({
            url: '/api/company/competencesearch/cpersonalitymap/map_data',
            type: 'GET',
            dataType: 'json',
            data: data,
            timeout: 5000,
        })
        .done(function(result) {
            displayPersonalityMap(JSON.parse(result.data), selectedStyleArray);
            loadingStop('#personality_map_modal .distribution');
        })
        .fail(function() {
            loadingStop('#personality_map_modal .distribution');
            alert('通信に失敗しました。しばらく経ってから再度お試しいただくか、インターネット環境をご確認ください。');
        });
    }

    function getCheckedLabelList() {
        var labelList = [];
        $('#label_filter_modal_01 .filter').each(function(){
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                labelList.push(parseInt($(this).val(), 10));
            }
        });
        return labelList;
    }

    function getPersonalityMapConfig() {
        $.ajax({
            url: '/api/company/competencesearch/cpersonalitymapcommon/config_data',
            type: 'GET',
            timeout: 5000,
        })
        .done(function(result) {
            displayPersonalityMapConfig(result.data);
        })
        .fail(function() {
            alert('通信に失敗しました。しばらく経ってから再度お試しいただくか、インターネット環境をご確認ください。');
        });
    }

    function updateLabelCount() {
        var target = {};
        $('#personality_map_modal .map_conditions input[type="checkbox"]:not(input[name="target_all"])').each(function(index, el) {
            target[$(this).val()] = Number($(this).prop('checked'));
        })
        var labels = getCheckedLabelList();
        var data = {
            'target': target,
            'year': $('#personality_map_modal .map_conditions select[name="year"] option:selected').val(),
            'phase': $('#personality_map_modal .map_conditions select[name="phase"] option:selected').val(),
            'label': labels
        };

        $.ajax({
          url: '/api/company/competencesearch/cpersonalityMapAnalytics/labelcount_overview',
          type: 'GET',
          dataType: 'json',
          timeout: 10000,
          data: data,
        })
        .done(function(result) {
          displayLabelCount(result.labels_count);
        })
        .fail(function() {
          alert('通信に失敗しました。しばらく経ってから再度お試しいただくか、インターネット環境をご確認ください。');
        });
    }

    function displayLabelCount(labels) {
        Object.keys(labels).forEach(function (key) {
            var changeTextId = '#count_' + key;
            var changeText = '(' + labels[key] + ')';
            $(changeTextId).text(changeText);
        });
    }

    function displaySelectedLabel() {
        var labelList = [];
        $('#label_filter_modal_01 .filter').each(function(){
            var isChecked = $(this).prop('checked');
            if (isChecked) {
                labelList.push($(this).next().find('.name').text());
            }
        });
        $('#selected_label').text(labelList.join(', '));
      }

    function displayPersonalityMapConfig(data) {
        var phaseListEl = '';
        Object.keys(data.phase).forEach(function(key) {
            phaseListEl += '<option value="' + key + '" style="text-indent: 0px;">' + data.phase[key] + '</option>';
        })
        $('.map_conditions select[name="phase"]').html(phaseListEl);
        var yearListEl = '<option value style="text-indent: 0px;">設定なし</option>';
        Object.keys(data.year).forEach(function(key) {
            yearListEl += '<option value="' + key + '" style="text-indent: 0px;">' + data.year[key] + '</option>';
        })
        $('.map_conditions select[name="year"]').html(yearListEl);
        var labelListEl = '';
        Object.keys(data.label).forEach(function(key) {
            labelListEl += '<input id="label_' + key + '" type="checkbox" class="js-search-label filter" value="' + key + '"/>';
            var labelClass = 'ofb-c-label';
            if (key === '1000') {
                labelClass += ' ofb-c-label__active';
            }
            if (key === '1001') {
                labelClass += ' ofb-c-label__passive';
            }

            labelListEl += '<label for="label_' + key + '" class="' + labelClass + '"><span class="name">' + data.label[key] + '</span><span id="count_' + key + '"></span></label>';
        })
        $('#label_filter_modal_01 .label-wrapper').html(labelListEl);
    }

    function displayPersonalityMap(data, selectedStyleArray) {
        var el = '';

        personalityMapStyle.forEach(function(style) {
            var row = data[style];
            var rhtml = '';

            Object.keys(row).forEach(function(key) {
                var chtml = '';
                var clData = row[key];
                var typeNum = key.slice(-1);
                var title = clData.name + '（Type' + typeNum + style + '）';
                var backgroundColor = clData.color[0] + ',' +  clData.color[1] + ',' + clData.color[2];
                var count = clData.count === 0 ? '' : clData.count;
                var styleKey = key + ',' + style;
                if (selectedStyleArray.indexOf(styleKey) >= 0) {
                    chtml += '<div class="distribution_cell selected" data-style="' + style + '" data-type="' + key + '" style="background: rgb(' + backgroundColor + ');">';
                } else {
                    chtml += '<div class="distribution_cell" data-style="' + style + '" data-type="' + key + '" style="background: rgb(' + backgroundColor + ');">';
                }
                chtml += '<div class="distribution_cell_content">' + count + '</div>';
                chtml += '<div class="distribution_detail hide"><div class="space"></div><div class="detail_header">' + title + '</div>';
                chtml += '<div class="detail_content">';
                chtml += createDetailContent(clData.students, clData.employees, data['company_member']['is_manager']);
                chtml += '</div>';
                chtml += '<div class="detail_footer"><a href="#personality_map_detail_modal" class="personality_map_detail_open" role="button" data-toggle="modal">スタイルの詳細を見る</a></div>';
                chtml += '</div></div>';
                rhtml += chtml;
            })

            el += '<div class="distribution_row">'+ rhtml +'</div>';
        })

        $('#personality_map_modal .distribution').html(el);
        $('.distribution_cell').click(function(e) {
            if (e.target.getAttribute('class') === 'distribution_cell_content') {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                } else {
                    $(this).addClass('selected');
                }
            }
            setSelectedStyleTmp();
        })
    }

    function createDetailContent(studentData, employeeData, isManager) {
        var studentList = studentData.display;
        var employeeList = employeeData.display;

        if (Object.keys(studentList).length === 0 && Object.keys(employeeList).length === 0) {
            return '<div class="no_list">対象者はいません</div>';
        }

        var content = '';
        content += '<div class="detail_list">';
        Object.keys(studentList).forEach(function(key) {
            if (studentList[key]['data_visible']) {
                content += '<a target="_blank" href="/cstudent/prof/' + studentList[key]['STUDENT_ID'] + '">' + studentList[key]['NAME'] + '</a>';
            } else {
                content += '<a class="not-link">' + studentList[key]['NAME'] + '</a>';
            }
        })
        if (studentData.count > 0) {
            content += '<div class="other txtcolor-gray txt12">他' + studentData.count + '名</div>';
        }
        content += '</div>';

        content += '<div class="detail_list">';
        Object.keys(employeeList).forEach(function(key) {
            if (isManager) {
                content += '<a target="_blank" href="/cef1g/result/main/company/' + employeeList[key]['EXAM_ID'] + '">' + employeeList[key]['NAME'] + '</a>';
            } else {
                content += '<a class="not-link">' + employeeList[key]['NAME'] + '</a>';
            }
        })
        if (employeeData.count > 0) {
            content += '<div class="other txtcolor-gray txt12">他' + employeeData.count + '名</div>';
        }
        content += '</div>';

        return content;
    }

    function getParam(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }

    function loadingStart(elem, size) {
        var style = "";
        if(typeof size != 'undefined') {
            var margin = (parseInt(size) * -1) / 2 + 'px';
            style = "font-size: " + size + "; margin-left:" + margin + "; margin-top:" + margin + ";" ;
        }
        if(typeof elem == 'undefined' || elem == null || elem == '') {
            $('body').append('<div class="loading"><i id="loading-icon" class="fa fa-spinner fa-3x fa-spin" style="' + style + '"></i></div>');
        } else {
            $(elem).append('<div class="loading" style="position: absolute;"><i id="loading-icon" class="fa fa-spinner fa-3x fa-spin" style="' + style + '"></i></div>');
        }
    }

    function loadingStop(elem) {
        if(typeof elem == 'undefined') {
            $('.loading').remove();
        } else {
            $(elem).find('.loading').remove();
        }
    }
})

/**
 * 似た人検索(40の人材像マップ)の検索条件リセット
 */
function resetSearchPersonalitymap() {
    var selectedStyleEl = '';
    $('.distribution_cell.selected').removeClass('selected');
    $('#cpersonalitymap_search_checked').hide();
    $('#selected_personalitymap_style').html(selectedStyleEl);
    set_search_count(make_search_params());
}

/**
 * 選択人材を保存
 */
function setSelectedStyleTmp() {
    selectedPersonalitymapStyleTmp = [];
    var selectedStyle = $('#personality_map_modal .distribution_cell.selected');
    selectedStyle.each(function(index, el) {
        var type = $(el).data('type');
        var style = $(el).data('style');
        selectedPersonalitymapStyleTmp.push(type +',' + style);
    });
}

/**
 * 詳細画面で人材を選択
 */
function selectStyleOnDetailModal(selectdeStyle, selectedType) {
    $('[data-style=' + selectdeStyle +'][data-type=' + selectedType + ']').addClass('selected');
    setSelectedStyleTmp();
}
